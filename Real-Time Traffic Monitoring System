Problem 3: Real-Time Traffic Monitoring System
Scenario:
To working on a project to develop a real-time traffic monitoring system for a smart city initiative. The system should provide real-time traffic updates and suggest alternative routes.
Tasks:
1. Model the data flow for fetching real-time traffic information from an external API and displaying it to the user.
2. Implement a Python application that integrates with a traffic monitoring API (e.g., Google Maps Traffic API) to fetch real-time traffic data.
3. Display current traffic conditions, estimated travel time, and any incidents or delays.
4. Allow users to input a starting point and destination to receive traffic updates and alternative routes.
Deliverables:
Data flow diagram illustrating the interaction between the application and the API.
Pseudocode and implementation of the traffic monitoring system.
Documentation of the API integration and the methods used to fetch and display traffic data.
Explanation of any assumptions made and potential improvements.

DATA FLOW DIAGRAM:-

User Input (Starting Point, Destination) -> Python Application -> Traffic API (e.g., Google Maps Traffic API)
                ^                                              |
                |                                              v
          Display Traffic Information <- JSON Response <- API Request

TRAFFIC MONITERING SYSTEM:-

import requests

class TrafficMonitoringSystem:
    def init(self, api_key):
        self.api_key = api_key
        self.base_url = 'https://maps.googleapis.com/maps/api/directions/json'
    
    def fetch_traffic_data(self, origin, destination):
        params = {
            'origin': origin,
            'destination': destination,
            'key': self.api_key,
            'departure_time': 'now',
            'traffic_model': 'best_guess',
            'mode': 'driving'
        }

        try:
            response = requests.get(self.base_url, params=params)
            data = response.json()

            if response.status_code == 200:
                return data  # Return JSON data received from API
            else:
                print(f"Error fetching data: {data['error_message']}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            return None

    def display_traffic_info(self, data):
        if data:
            # Extract relevant traffic information
            routes = data.get('routes', [])
            if routes:
                main_route = routes[0]
                traffic_condition = main_route['summary']
                estimated_time = main_route['legs'][0]['duration_in_traffic']['text']
                incidents = main_route.get('warnings', [])

                # Displaying traffic information
                print(f"Traffic Conditions: {traffic_condition}")
                print(f"Estimated Travel Time: {estimated_time}")
                if incidents:
                    print("Incidents/Warnings:")
                    for incident in incidents:
                        print(f"- {incident}")
                else:
                    print("No incidents or warnings.")
            else:
                print("No routes found.")

        else:
            print("No traffic data available.")

# Example usage:
By incorporating these improvements, the traffic monitoring system can provide more comprehensive and user-friendly real-time updates, enhancing its utility for users navigating through urban environments or planning trips.
